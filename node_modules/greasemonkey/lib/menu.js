'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("./api");
const Map_registerMenuCommand = new Map();
function registerMenuCommand(options, callback, argv = []) {
    if (typeof options == 'string') {
        options = {
            label: options,
        };
    }
    const label = getLabel(options);
    const fn = async function () {
        console.time(label);
        console.group(label);
        let ret;
        try {
            ret = await callback(options, ...argv);
            if (ret && ret !== true) {
                console.info(label, options.fn_name || callback.name, [ret.length, ret]);
            }
        }
        catch (e) {
            console.error(e);
        }
        console.groupEnd(label);
        console.timeEnd(label);
    };
    if (typeof api_1.default.registerMenuCommand == 'function') {
        api_1.default.registerMenuCommand(label, fn);
    }
    else {
        console.warn('GM_registerMenuCommand not a function.');
    }
    Map_registerMenuCommand.set(label, fn);
    return label;
}
exports.registerMenuCommand = registerMenuCommand;
function getLabel(options) {
    if (typeof options == 'string') {
        options = {
            label: options,
        };
    }
    const label = options.label || `[${options.name || options.id}] ${options.key}`;
    return label;
}
exports.getLabel = getLabel;
async function callMenuCommand(options, ...argv) {
    const label = getLabel(options);
    let fn = Map_registerMenuCommand.get(label);
    if (fn) {
        return await fn(...argv);
    }
    return fn;
}
exports.callMenuCommand = callMenuCommand;
function listMenuCommand() {
    let ls = [];
    Map_registerMenuCommand.forEach(function (value, key, map) {
        ls.push(key);
    });
    return ls;
}
exports.listMenuCommand = listMenuCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsWUFBWSxDQUFDOztBQUViLCtCQUEwQjtBQUUxQixNQUFNLHVCQUF1QixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFvQjFDLFNBQWdCLG1CQUFtQixDQUFDLE9BQTZDLEVBQ2hGLFFBQXNDLEVBQ3RDLElBQUksR0FBRyxFQUFFO0lBR1QsSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLEVBQzlCO1FBQ0MsT0FBTyxHQUFHO1lBQ1QsS0FBSyxFQUFFLE9BQU87U0FDaUIsQ0FBQztLQUNqQztJQUVELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVoQyxNQUFNLEVBQUUsR0FBRyxLQUFLO1FBRWYsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJCLElBQUksR0FBRyxDQUFDO1FBRVIsSUFDQTtZQUVDLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFzQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFdEUsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLElBQUksRUFDdkI7Z0JBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUcsT0FBdUMsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMxRztTQUNEO1FBQ0QsT0FBTyxDQUFDLEVBQ1I7WUFDQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBR0QsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztJQUVGLElBQUksT0FBTyxhQUFLLENBQUMsbUJBQW1CLElBQUksVUFBVSxFQUNsRDtRQUNDLGFBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDckM7U0FFRDtRQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUN2RDtJQUVELHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFdkMsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBckRELGtEQXFEQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxPQUE2QztJQUVyRSxJQUFJLE9BQU8sT0FBTyxJQUFJLFFBQVEsRUFDOUI7UUFDQyxPQUFPLEdBQUc7WUFDVCxLQUFLLEVBQUUsT0FBaUI7U0FDTyxDQUFDO0tBQ2pDO0lBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFaEYsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBWkQsNEJBWUM7QUFFTSxLQUFLLFVBQVUsZUFBZSxDQUFDLE9BQTZDLEVBQUUsR0FBRyxJQUFJO0lBRTNGLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVoQyxJQUFJLEVBQUUsR0FBRyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFhLENBQUM7SUFFeEQsSUFBSSxFQUFFLEVBQ047UUFDQyxPQUFPLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDekI7SUFFRCxPQUFPLEVBQUUsQ0FBQztBQUNYLENBQUM7QUFaRCwwQ0FZQztBQUVELFNBQWdCLGVBQWU7SUFFOUIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBRVosdUJBQXVCLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBRXhELEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sRUFBRSxDQUFDO0FBQ1gsQ0FBQztBQVZELDBDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE3LzcvMjEvMDIxLlxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBHTUFwaSBmcm9tICcuL2FwaSc7XHJcblxyXG5jb25zdCBNYXBfcmVnaXN0ZXJNZW51Q29tbWFuZCA9IG5ldyBNYXAoKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlZ2lzdGVyTWVudUNvbW1hbmRPcHRpb25zXHJcbntcclxuXHRpZD86IHN0cmluZztcclxuXHRrZXk/OiBzdHJpbmc7XHJcblxyXG5cdG5hbWU/OiBzdHJpbmc7XHJcblx0bGFiZWw/OiBzdHJpbmc7XHJcblxyXG5cdGZuX25hbWU/O1xyXG5cclxuXHRba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlZ2lzdGVyTWVudUNvbW1hbmRDYWxsYmFjayBleHRlbmRzIEZ1bmN0aW9uXHJcbntcclxuXHQob3B0aW9uczogSVJlZ2lzdGVyTWVudUNvbW1hbmRPcHRpb25zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTWVudUNvbW1hbmQob3B0aW9uczogc3RyaW5nIHwgSVJlZ2lzdGVyTWVudUNvbW1hbmRPcHRpb25zLFxyXG5cdGNhbGxiYWNrOiBJUmVnaXN0ZXJNZW51Q29tbWFuZENhbGxiYWNrLFxyXG5cdGFyZ3YgPSBbXVxyXG4pXHJcbntcclxuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ3N0cmluZycpXHJcblx0e1xyXG5cdFx0b3B0aW9ucyA9IHtcclxuXHRcdFx0bGFiZWw6IG9wdGlvbnMsXHJcblx0XHR9IGFzIElSZWdpc3Rlck1lbnVDb21tYW5kT3B0aW9ucztcclxuXHR9XHJcblxyXG5cdGNvbnN0IGxhYmVsID0gZ2V0TGFiZWwob3B0aW9ucyk7XHJcblxyXG5cdGNvbnN0IGZuID0gYXN5bmMgZnVuY3Rpb24gKClcclxuXHR7XHJcblx0XHRjb25zb2xlLnRpbWUobGFiZWwpO1xyXG5cdFx0Y29uc29sZS5ncm91cChsYWJlbCk7XHJcblxyXG5cdFx0bGV0IHJldDtcclxuXHJcblx0XHR0cnlcclxuXHRcdHtcclxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxyXG5cdFx0XHRyZXQgPSBhd2FpdCBjYWxsYmFjayhvcHRpb25zIGFzIElSZWdpc3Rlck1lbnVDb21tYW5kT3B0aW9ucywgLi4uYXJndik7XHJcblxyXG5cdFx0XHRpZiAocmV0ICYmIHJldCAhPT0gdHJ1ZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnNvbGUuaW5mbyhsYWJlbCwgKG9wdGlvbnMgYXMgSVJlZ2lzdGVyTWVudUNvbW1hbmRPcHRpb25zKS5mbl9uYW1lIHx8IGNhbGxiYWNrLm5hbWUsIFtyZXQubGVuZ3RoLCByZXRdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Y2F0Y2ggKGUpXHJcblx0XHR7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQHRzLWlnbm9yZVxyXG5cdFx0Y29uc29sZS5ncm91cEVuZChsYWJlbCk7XHJcblx0XHRjb25zb2xlLnRpbWVFbmQobGFiZWwpO1xyXG5cdH07XHJcblxyXG5cdGlmICh0eXBlb2YgR01BcGkucmVnaXN0ZXJNZW51Q29tbWFuZCA9PSAnZnVuY3Rpb24nKVxyXG5cdHtcclxuXHRcdEdNQXBpLnJlZ2lzdGVyTWVudUNvbW1hbmQobGFiZWwsIGZuKTtcclxuXHR9XHJcblx0ZWxzZVxyXG5cdHtcclxuXHRcdGNvbnNvbGUud2FybignR01fcmVnaXN0ZXJNZW51Q29tbWFuZCBub3QgYSBmdW5jdGlvbi4nKTtcclxuXHR9XHJcblxyXG5cdE1hcF9yZWdpc3Rlck1lbnVDb21tYW5kLnNldChsYWJlbCwgZm4pO1xyXG5cclxuXHRyZXR1cm4gbGFiZWw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYWJlbChvcHRpb25zOiBzdHJpbmcgfCBJUmVnaXN0ZXJNZW51Q29tbWFuZE9wdGlvbnMpOiBzdHJpbmdcclxue1xyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJylcclxuXHR7XHJcblx0XHRvcHRpb25zID0ge1xyXG5cdFx0XHRsYWJlbDogb3B0aW9ucyBhcyBzdHJpbmcsXHJcblx0XHR9IGFzIElSZWdpc3Rlck1lbnVDb21tYW5kT3B0aW9ucztcclxuXHR9XHJcblxyXG5cdGNvbnN0IGxhYmVsID0gb3B0aW9ucy5sYWJlbCB8fCBgWyR7b3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuaWR9XSAke29wdGlvbnMua2V5fWA7XHJcblxyXG5cdHJldHVybiBsYWJlbDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGxNZW51Q29tbWFuZChvcHRpb25zOiBzdHJpbmcgfCBJUmVnaXN0ZXJNZW51Q29tbWFuZE9wdGlvbnMsIC4uLmFyZ3YpXHJcbntcclxuXHRjb25zdCBsYWJlbCA9IGdldExhYmVsKG9wdGlvbnMpO1xyXG5cclxuXHRsZXQgZm4gPSBNYXBfcmVnaXN0ZXJNZW51Q29tbWFuZC5nZXQobGFiZWwpIGFzIEZ1bmN0aW9uO1xyXG5cclxuXHRpZiAoZm4pXHJcblx0e1xyXG5cdFx0cmV0dXJuIGF3YWl0IGZuKC4uLmFyZ3YpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGZuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlzdE1lbnVDb21tYW5kKCk6IHN0cmluZ1tdXHJcbntcclxuXHRsZXQgbHMgPSBbXTtcclxuXHJcblx0TWFwX3JlZ2lzdGVyTWVudUNvbW1hbmQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSwgbWFwKVxyXG5cdHtcclxuXHRcdGxzLnB1c2goa2V5KTtcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIGxzO1xyXG59XHJcbiJdfQ==