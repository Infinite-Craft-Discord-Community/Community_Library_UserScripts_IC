"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("./api");
const bluebird = require("bluebird");
exports.GM_XHR = api_1.default.xmlhttpRequest;
function makeOptions(options) {
    let data = Object.assign({
        method: 'GET',
    }, options);
    if (data.xhrFields) {
        Object.assign(data, data.xhrFields);
    }
    return data;
}
exports.makeOptions = makeOptions;
function ajax(url, options) {
    options = makeOptions(options);
    options.url = url;
    if (options.data && typeof options.data == 'object' && !(options.data instanceof FormData)) {
        let formData = new FormData();
        for (let i in options.data) {
            formData.append(i, options.data[i]);
        }
        options.data = formData;
    }
    return new bluebird(function (resolve, reject) {
        exports.GM_XHR(Object.assign({}, options, {
            onload: function (res) {
                resolve(res);
            },
            onerror: reject,
        }));
    })
        .then(function (res) {
        if (options.dataType == 'json') {
            res.responseOriginal = res.response;
            res.response = JSON.parse(res.responseText);
        }
        res.responseType = res.responseType || options.dataType || null;
        if (typeof options.onload === 'function') {
            let ret = options.onload.call(this, res);
            if (typeof ret !== 'undefined') {
                return ret;
            }
        }
        return res;
    });
}
exports.ajax = ajax;
function AjaxError(res, libError = Error) {
    let err = new libError(res);
    err.res = res;
    return err;
}
exports.AjaxError = AjaxError;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieGhyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsK0JBQTBCO0FBQzFCLHFDQUFxQztBQUV4QixRQUFBLE1BQU0sR0FBRyxhQUFLLENBQUMsY0FBYyxDQUFDO0FBd0IzQyxTQUFnQixXQUFXLENBQUMsT0FBOEM7SUFFekUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN4QixNQUFNLEVBQUUsS0FBSztLQUNiLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFWixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQ2xCO1FBQ0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBWkQsa0NBWUM7QUFFRCxTQUFnQixJQUFJLENBQUMsR0FBRyxFQUFFLE9BQStDO0lBRXhFLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFL0IsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFHbEIsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sT0FBTyxDQUFDLElBQUksSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFlBQVksUUFBUSxDQUFDLEVBQzFGO1FBQ0MsSUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUU5QixLQUFLLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQzFCO1lBQ0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO1FBR0QsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7S0FDeEI7SUFFRCxPQUFPLElBQUksUUFBUSxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU07UUFFNUMsY0FBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRTtZQUNqQyxNQUFNLEVBQUUsVUFBVSxHQUE0QjtnQkFFN0MsT0FBTyxDQUFDLEdBQThCLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0QsT0FBTyxFQUFFLE1BQU07U0FDZixDQUE0QixDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO1NBQ0EsSUFBSSxDQUFDLFVBQVUsR0FBNEI7UUFFM0MsSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLE1BQU0sRUFDOUI7WUFDQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUNwQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzVDO1FBRUQsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1FBRWhFLElBQUksT0FBTyxPQUFPLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFDeEM7WUFDQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFekMsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLEVBQzlCO2dCQUNDLE9BQU8sR0FBOEIsQ0FBQzthQUN0QztTQUNEO1FBRUQsT0FBTyxHQUE4QixDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUNGO0FBQ0YsQ0FBQztBQXJERCxvQkFxREM7QUFFRCxTQUFnQixTQUFTLENBQVksR0FBRyxFQUFFLFdBQTZCLEtBQUs7SUFFM0UsSUFBSSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFHNUIsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFHZCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFURCw4QkFTQztBQUVELGtCQUFlLE9BQWlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE3LzExLzI2LzAyNi5cbiAqL1xuXG5pbXBvcnQgR01BcGkgZnJvbSAnLi9hcGknO1xuaW1wb3J0IGJsdWViaXJkID0gcmVxdWlyZSgnYmx1ZWJpcmQnKVxuXG5leHBvcnQgY29uc3QgR01fWEhSID0gR01BcGkueG1saHR0cFJlcXVlc3Q7XG5cbmV4cG9ydCB0eXBlIElPcHRpb25zX1NoYXJlID0ge1xuXHRkYXRhOiBzdHJpbmcgfCBhbnlbXSB8IEZvcm1EYXRhO1xuXHRkYXRhVHlwZT86IHN0cmluZztcbn1cblxuLy8gQHRzLWlnbm9yZVxuZXhwb3J0IHR5cGUgSVhNTEh0dHBSZXF1ZXN0T3B0aW9ucyA9IEdNWE1MSHR0cFJlcXVlc3RPcHRpb25zICYgSU9wdGlvbnNfU2hhcmUgJiB7XG5cdHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCB0eXBlIElBamF4T3B0aW9ucyA9IEpRdWVyeS5BamF4U2V0dGluZ3MgJiBJT3B0aW9uc19TaGFyZSAmIHtcblxuXHR4aHJGaWVsZHM/OiBJWE1MSHR0cFJlcXVlc3RPcHRpb25zLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBJWE1MSHR0cFJlcXVlc3RSZXNwb25zZSBleHRlbmRzIEdNWE1MSHR0cFJlcXVlc3RSZXNwb25zZVxue1xuXHRyZXNwb25zZT87XG5cdHJlc3BvbnNlVHlwZT86IHN0cmluZztcblx0cmVzcG9uc2VPcmlnaW5hbD87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlT3B0aW9ucyhvcHRpb25zOiBJQWpheE9wdGlvbnMgJiBJWE1MSHR0cFJlcXVlc3RPcHRpb25zKTogSVhNTEh0dHBSZXF1ZXN0T3B0aW9uc1xue1xuXHRsZXQgZGF0YSA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdG1ldGhvZDogJ0dFVCcsXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGlmIChkYXRhLnhockZpZWxkcylcblx0e1xuXHRcdE9iamVjdC5hc3NpZ24oZGF0YSwgZGF0YS54aHJGaWVsZHMpO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhamF4KHVybCwgb3B0aW9ucz86IElBamF4T3B0aW9ucyAmIElYTUxIdHRwUmVxdWVzdE9wdGlvbnMpOiBibHVlYmlyZDxJWE1MSHR0cFJlcXVlc3RSZXNwb25zZT5cbntcblx0b3B0aW9ucyA9IG1ha2VPcHRpb25zKG9wdGlvbnMpO1xuXG5cdG9wdGlvbnMudXJsID0gdXJsO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKG9wdGlvbnMuZGF0YSAmJiB0eXBlb2Ygb3B0aW9ucy5kYXRhID09ICdvYmplY3QnICYmICEob3B0aW9ucy5kYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpKVxuXHR7XG5cdFx0bGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cblx0XHRmb3IgKGxldCBpIGluIG9wdGlvbnMuZGF0YSlcblx0XHR7XG5cdFx0XHRmb3JtRGF0YS5hcHBlbmQoaSwgb3B0aW9ucy5kYXRhW2ldKTtcblx0XHR9XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0b3B0aW9ucy5kYXRhID0gZm9ybURhdGE7XG5cdH1cblxuXHRyZXR1cm4gbmV3IGJsdWViaXJkKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpXG5cdHtcblx0XHRHTV9YSFIoT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuXHRcdFx0b25sb2FkOiBmdW5jdGlvbiAocmVzOiBJWE1MSHR0cFJlcXVlc3RSZXNwb25zZSlcblx0XHRcdHtcblx0XHRcdFx0cmVzb2x2ZShyZXMgYXMgSVhNTEh0dHBSZXF1ZXN0UmVzcG9uc2UpO1xuXHRcdFx0fSxcblx0XHRcdG9uZXJyb3I6IHJlamVjdCxcblx0XHR9KSBhcyBHTVhNTEh0dHBSZXF1ZXN0T3B0aW9ucyk7XG5cdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHJlczogSVhNTEh0dHBSZXF1ZXN0UmVzcG9uc2UpXG5cdFx0e1xuXHRcdFx0aWYgKG9wdGlvbnMuZGF0YVR5cGUgPT0gJ2pzb24nKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXMucmVzcG9uc2VPcmlnaW5hbCA9IHJlcy5yZXNwb25zZTtcblx0XHRcdFx0cmVzLnJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXMucmVzcG9uc2VUZXh0KTtcblx0XHRcdH1cblxuXHRcdFx0cmVzLnJlc3BvbnNlVHlwZSA9IHJlcy5yZXNwb25zZVR5cGUgfHwgb3B0aW9ucy5kYXRhVHlwZSB8fCBudWxsO1xuXG5cdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMub25sb2FkID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgcmV0ID0gb3B0aW9ucy5vbmxvYWQuY2FsbCh0aGlzLCByZXMpO1xuXG5cdFx0XHRcdGlmICh0eXBlb2YgcmV0ICE9PSAndW5kZWZpbmVkJylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiByZXQgYXMgSVhNTEh0dHBSZXF1ZXN0UmVzcG9uc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlcyBhcyBJWE1MSHR0cFJlcXVlc3RSZXNwb25zZTtcblx0XHR9KVxuXHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBamF4RXJyb3I8VCA9IEVycm9yPihyZXMsIGxpYkVycm9yOiBFcnJvckNvbnN0cnVjdG9yID0gRXJyb3IpOiBUICYge3Jlcz99XG57XG5cdGxldCBlcnIgPSBuZXcgbGliRXJyb3IocmVzKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGVyci5yZXMgPSByZXM7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gZXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4veGhyJyk7Il19